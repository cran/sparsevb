// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEnsmallen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// fit_linear
Rcpp::List fit_linear(const arma::mat& X, const arma::vec& Y, arma::vec mu, arma::vec sigma, arma::vec gamma, const double& alpha, const double& beta, const double& lambda, const arma::uvec& update_order, const std::string& prior, const size_t& max_iter, const double& tol);
RcppExport SEXP _sparsevb_fit_linear(SEXP XSEXP, SEXP YSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP gammaSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP lambdaSEXP, SEXP update_orderSEXP, SEXP priorSEXP, SEXP max_iterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type update_order(update_orderSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_linear(X, Y, mu, sigma, gamma, alpha, beta, lambda, update_order, prior, max_iter, tol));
    return rcpp_result_gen;
END_RCPP
}
// fit_logistic
Rcpp::List fit_logistic(const arma::mat& X, const arma::vec& Y, arma::vec mu, arma::vec sigma, arma::vec gamma, const double& alpha, const double& beta, const double& lambda, const arma::uvec& update_order, const std::string& prior, const size_t& max_iter, const double& tol);
RcppExport SEXP _sparsevb_fit_logistic(SEXP XSEXP, SEXP YSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP gammaSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP lambdaSEXP, SEXP update_orderSEXP, SEXP priorSEXP, SEXP max_iterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type update_order(update_orderSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_logistic(X, Y, mu, sigma, gamma, alpha, beta, lambda, update_order, prior, max_iter, tol));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sparsevb_fit_linear", (DL_FUNC) &_sparsevb_fit_linear, 12},
    {"_sparsevb_fit_logistic", (DL_FUNC) &_sparsevb_fit_logistic, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_sparsevb(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
